package loderunner;

import java.awt.Color;
import java.awt.Rectangle;
import java.awt.Shape;

public class Guard extends AbstractCharacter implements Runnable {

	public int x;
	public int y;
	private Rectangle guard;
	private Color guardColor;
	private int counter = 0;
	private Block[][] blockList;
	public boolean guardIsFalling = false;
	public boolean guardIsCorrect = true;
	private Thread thread;
	int BLOCKSIZE = 35;
	int HEROSIZE = 20;
	int previousHeroX = 0;
	int previousHeroY = 0;
	public boolean died=false;
	public boolean gotHero=false;
	public boolean gold;

	public Guard(int x_pos, int y_pos, Block[][] blocks, boolean Gold) {
		super(x_pos, y_pos, blocks);
		this.x = x_pos;
		this.y = y_pos;
		this.guard = new Rectangle(x_pos, y_pos, 20, 20);
		this.guardColor = Color.BLUE;
		this.blockList = blocks;
		this.thread = new Thread(this);
		this.thread.start();
		this.gold = Gold;
	}

	public double getX() {
		return this.x;
	}

	public double getY() {
		return this.y;
	}

	public void updatePosition(int deltaX, int deltaY) {

	}

	@Override
	public Color getColor() {
		return this.guardColor;
	}

	@Override
	public void setColor(Color newColor) {
		this.guardColor = newColor;
	}

	@Override
	public Shape getShape() {
		return this.guard;
	}

	public boolean hasGold() {
		return this.gold;
	}

	public void RandomMove() {
		double random_num = Math.random();
		if (Math.random() < 0.5) {
			updatePosition(3, 0);
		}
		if (Math.random() > 0.5) {
			updatePosition(-3, 0);
		}

	}

	public void Chase(Hero hero, int deltaX, int deltaY) {
		hasHero(hero);
		int column = (this.x) / BLOCKSIZE;
		int leftColumn = column - 1;
		int rightColumn = column + 1;
		int Row = (this.y) / BLOCKSIZE;
		if (hero.x == previousHeroX && hero.y == previousHeroY
				&& this.blockList[column][Row].isCharacterInSameSpot(hero, this)) {
			deltaX = 0;
			deltaY = 0;
		}
		previousHeroX = hero.x;
		previousHeroY = hero.y;

//		if (this.x > hero.x) {
//			deltaX = deltaX * -1;
//		}
//		if (this.y < hero.y) {
//			deltaY = deltaY * -1;
//		}
		if (heroIsBelow(hero)){
			deltaY = deltaY * -1;
		}
		else if (!heroIsAbove(hero)){
			deltaY=0;
		}
		if (heroIsLeft(hero)){
			deltaX = deltaX * -1;
		}
		else if(!heroIsRight(hero)){
			deltaX=0;
		}
		

		if (!checkFall()) {
			// Left-Right Code
			if (deltaX > 0) {
				if (this.blockList[rightColumn][Row].Passable()) {
					this.x += deltaX;
				} else if (!(this.blockList[rightColumn][Row].Passable())) {
					if (this.x + HEROSIZE + deltaX <= (rightColumn) * BLOCKSIZE) {
						this.x += deltaX;
					}
				} else if (this.y >= (Row) * BLOCKSIZE - 15
						&& this.blockList[column][Row + 1].getType() == "Brick") {
					this.guardIsCorrect = false;
				}
			} else if (deltaX < 0) {
				if (leftColumn < 0) {
					leftColumn = 0;
				} else if (this.blockList[leftColumn][Row].Passable()) {
					this.x += deltaX;
				} else if (!(this.blockList[leftColumn][Row].Passable())) {
					if (this.x + deltaX >= (leftColumn) * BLOCKSIZE + 35) {
						this.x += deltaX;
					}
				} else if (this.y >= (Row) * BLOCKSIZE - 15
						&& this.blockList[column][Row + 1].getType() == "Brick") {
					this.guardIsCorrect = false;
				}
			}
		}
		// Climbing ladders
		if (deltaY > 0) {
			if (this.blockList[column][Row].isClimbeable()
					|| this.blockList[column][Row + 1].isClimbeable()) {
				if (this.x >= column * BLOCKSIZE
						&& this.x <= (rightColumn) * BLOCKSIZE) {
					this.y -= deltaY;
				}
			}
			if (this.blockList[column][Row + 1].isClimbeable()
					&& !this.blockList[column][Row].isClimbeable()) {
				this.y -= this.y - deltaY - ((Row) * BLOCKSIZE + 10);
			}
		}

		if (deltaY < 0) {
			if (this.blockList[column][Row + 1].isClimbeable()) {
				if (this.x >= column * BLOCKSIZE
						&& this.x <= (rightColumn) * BLOCKSIZE) {
					this.y -= deltaY;
				}
			}
			if (!this.blockList[column][Row + 1].isClimbeable()) {
				if (this.y + HEROSIZE - deltaY <= (Row + 1) * BLOCKSIZE) {
					this.y -= deltaY;
				}
			}
		}
		
		// Falling code
		if (this.blockList[column][Row + 1].isFallable()
				&& !(this.blockList[column + -1][Row].isHangable())) {
			this.guardIsFalling = true;
			this.guardIsCorrect = false;
		} else {
			this.guardIsFalling = false;
		}
		if ((!(this.blockList[column][Row + 1].isFallable()) || this.blockList[column][Row]
				.getType() == "Broken")
				&& (this.y >= (Row) * BLOCKSIZE + 15)
				&& !(this.guardIsCorrect)) {
			guardIsCorrect = true;
		}

		this.guard = new Rectangle(this.x, this.y, HEROSIZE, HEROSIZE);

	}

	/**
	 * Returns if the guard is falling
	 * 
	 */
	@Override
	public boolean checkFall() {
		return this.guardIsFalling;
	}

	/**
	 * Returns if the guard touches the ground
	 * 
	 * @return boolean of if the guard is meeting the ground
	 */
	public boolean checkCorrect() {
		return this.guardIsCorrect;
	}

	@Override
	public boolean die() {
		return this.died;
	}

	@Override
	public void run() {
		final int FRAMES_PER_SECOND = 30;
		final long REPAINT_INTERVAL_MS = 1000 / FRAMES_PER_SECOND;
		try {
			while (true) {
				Thread.sleep(1);
				while (this.checkFall()) {
					Thread.sleep(REPAINT_INTERVAL_MS);
					this.y += 1;
				}

				Thread.sleep(1);
				while (!(this.guardIsCorrect)) {
					Thread.sleep(REPAINT_INTERVAL_MS);
					this.y += 1;

				}
			}
		} catch (InterruptedException exception) {
			// Do nothing
		}
	}
	
	private boolean heroIsBelow(Hero hero){
		if (hero.y>this.y){
			return true;
		}
		else{
			return false;
		}
	}
	
	private boolean heroIsAbove(Hero hero){
		if (hero.y<this.y){
			return true;
		}
		else{
			return false;
		}
	}
	
	private boolean heroIsLeft(Hero hero){
		if (hero.x<this.x){
			return true;
		}
		else{
			return false;
		}
	}
	
	private boolean heroIsRight(Hero hero){
		if (hero.x>this.x){
			return true;
		}
		else{
			return false;
		}
	}
	
	private void hasHero(Hero hero){
		if (hero.died){
			this.gotHero =true;
		}
	}
	
	

}
